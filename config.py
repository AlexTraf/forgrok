import asyncio
import json
import logging
from logging import StreamHandler
import os
from datetime import datetime
from os import listdir
from aiogram import Bot, Dispatcher, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telethon.tl.types import ReactionEmoji
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# –õ–æ–≥–≥–µ—Ä
rootLogger = logging.getLogger('root')
rootLogger.setLevel(logging.DEBUG)

formatter = logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s]: %(message)s (%(filename)s:%(lineno)d)')

fileHandler = logging.FileHandler("app.log", "w", encoding="utf-8")
fileHandler.setLevel(logging.DEBUG)
fileHandler.setFormatter(formatter)
rootLogger.addHandler(fileHandler)

consoleHandler = StreamHandler()
consoleHandler.setLevel(logging.INFO)
consoleHandler.setFormatter(formatter)
rootLogger.addHandler(consoleHandler)

today = datetime.now().strftime("%Y-%m-%d")
daily_log_file = f"daily_log_{today}.txt"
dailyLogHandler = logging.FileHandler(daily_log_file, "a", encoding="utf-8")
dailyLogHandler.setLevel(logging.INFO)
dailyLogHandler.setFormatter(formatter)
rootLogger.addHandler(dailyLogHandler)

logging.getLogger('telethon').setLevel(logging.WARNING)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
liking_tasks = []
company_stats = {}
stats_lock = asyncio.Lock()
chat_lock = asyncio.Lock()
current_company = None
company_active = {}
config = {}
with open("config.json", "r", encoding='utf-8') as config_file:
    config = json.load(config_file)
scheduler = AsyncIOScheduler()
bot = Bot(config["token"])
dp = Dispatcher()
owner_id = config["owner_id"]
chat_id = config["chat_id"]
default_company_config: dict = {}
sessions = []
selected_company = None
company_configs = {}
created_channels = {}
users_paused = {}
api_id = 28229033
api_hash = "00dda765bff2ad74e70cc0bb68eb6e6b"

POSITIVE_REACTIONS = ["‚ù§Ô∏è", "üëç", "üî•", "üòç", "üéâ"]

TRANS_TABLE = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e', '–∂': 'zh',
    '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
    '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
    '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu',
    '—è': 'ya'
}

DEVICES_INFO = [
    {"model": "iPhone 13 Pro Max", "system_version": "18.2", "app_version": "11.2"},
    {"model": "iPhone XR", "system_version": "18.1", "app_version": "11.2"},
    {"model": "iPhone 16 Pro", "system_version": "17.2", "app_version": "11.2"}
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã", callback_data="add_chats")],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏", callback_data="add_sessions")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–π", callback_data="change_sessions")],
    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é", callback_data="change_company")],
    [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="account_stats")],
    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="check_account_status")],
    [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫–∏–Ω–≥ —Å—Ç–æ—Ä–∏—Å", callback_data="toggle_story_liking")],
    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°", callback_data="send_pm")]
])

kb_change_settings = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="change_fname")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="change_bio")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="change_lname")],
    [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="delete_avatar")],
    [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="change_avatar")],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
    [InlineKeyboardButton(text="–°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", callback_data="collect_created_views_stats")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="change_story_reactions")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

kb_company_config = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

kb_all_or_select = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="select_all")],
    [InlineKeyboardButton(text="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="select_selective")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_channel")]
])

kb_add_users = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ Excel", callback_data="add_users_excel")],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–∫—Å—Ç–æ–º", callback_data="add_users_text")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_change")]
])

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CompanyToggleState(StatesGroup):
    selected_companies = State()

class AddChatsState(StatesGroup):
    chats = State()

class BlacklistState(StatesGroup):
    company = State()
    usernames = State()

class SendPMState(StatesGroup):
    username = State()
    message = State()

class CollectViewsStatsState(StatesGroup):
    channel_name = State()

class CreateCompanyState(StatesGroup):
    name = State()

class CompanyConfigChangeState(StatesGroup):
    change = State()
    value = State()

class AddPrivateChannelState(StatesGroup):
    name = State()
    avatar = State()
    posts = State()
    select = State()
    confirm = State()

class AddSessionState(StatesGroup):
    add = State()

class ChangeState(StatesGroup):
    change = State()
    value = State()
    select = State()

class CompanyToggleCallback(CallbackData, prefix="company_toggle"):
    action: str
    company_name: str