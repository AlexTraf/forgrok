import json
import os
import logging
import asyncio
from datetime import datetime
import pytz
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon import functions
from telethon.tl.types import ChannelParticipant, Chat, Channel, PeerUser
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.errors import UserNotParticipantError, ForbiddenError, ValueError, FloodWaitError
from config import (
    rootLogger, sessions, company_stats, stats_lock, selected_company, company_configs,
    company_active, bot, chat_id, TRANS_TABLE, default_company_config, created_channels, users_paused
)

def write_daily_log(message):
    global daily_log_file, dailyLogHandler
    today = datetime.now().strftime("%Y-%m-%d")
    new_log_file = f"daily_log_{today}.txt"
    if new_log_file != daily_log_file:
        daily_log_file = new_log_file
        dailyLogHandler.close()
        dailyLogHandler = logging.FileHandler(daily_log_file, "a", encoding="utf-8")
        dailyLogHandler.setLevel(logging.INFO)
        dailyLogHandler.setFormatter(logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s]: %(message)s (%(filename)s:%(lineno)d)'))
        rootLogger.handlers = [h for h in rootLogger.handlers if not isinstance(h, logging.FileHandler) or h.baseFilename != daily_log_file]
        rootLogger.addHandler(dailyLogHandler)

def transliterate(text):
    result = ''
    for char in text.lower():
        result += TRANS_TABLE.get(char, char)
    return ''.join(c for c in result if c.isalpha() or c.isspace()).replace(" ", "")

async def get_stats_text(company):
    ses = list(filter(lambda x: x.me is not None and x.company == company, sessions))
    async with stats_lock:
        stats = []
        stats.append(f"–ö–æ–º–ø–∞–Ω–∏—è: {company}")
        stats.append(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ses)}")
        stats.append(f"–õ–∞–π–∫–æ–≤ —Å—Ç–æ—Ä–∏—Å —Å–µ–≥–æ–¥–Ω—è: {sum(s.story_likes_today for s in ses)}")
        stats.append(f"–°—Ç–æ—Ä–∏—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {company_stats[company]['stories_viewed']}")
        stats.append(f"–õ–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {company_stats[company]['likes_set']}")
        stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫—Ä—ã—Ç–æ: {len(company_stats[company]['unique_users'])}")
        stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–æ—Ä–∏—Å–∞–º–∏: {len(company_stats[company]['unique_users_with_stories'])}")
        stats.append(f"–ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {company_stats[company]['channels_processed']}")
        stats.append(f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {company_stats[company]['chats_processed']}")
        stats.append("")
        stats.append("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:")
    return "\n".join(stats)

def get_all_stats():
    total_accounts = 0
    stats = []
    for company in company_configs.keys():
        company_sessions = list(filter(lambda x: x.me is not None and x.company == company, sessions))
        if company not in company_stats:
            company_stats[company] = {
                "stories_viewed": 0,
                "likes_set": 0,
                "unique_users": set(),
                "channels_processed": 0,
                "chats_processed": 0,
                "unique_users_with_stories": set()
            }
        accounts_count = len(company_sessions)
        if not accounts_count:
            continue
        stats.append(f"–ö–æ–º–ø–∞–Ω–∏—è: {company}")
        stats.append(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}")
        stats.append(f"–õ–∞–π–∫–æ–≤ —Å—Ç–æ—Ä–∏—Å —Å–µ–≥–æ–¥–Ω—è: {sum(s.story_likes_today for s in company_sessions)}")
        stats.append(f"–°—Ç–æ—Ä–∏—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {company_stats[company]['stories_viewed']}")
        stats.append(f"–õ–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {company_stats[company]['likes_set']}")
        stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫—Ä—ã—Ç–æ: {len(company_stats[company]['unique_users'])}")
        stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–æ—Ä–∏—Å–∞–º–∏: {len(company_stats[company]['unique_users_with_stories'])}")
        stats.append(f"–ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {company_stats[company]['channels_processed']}")
        stats.append(f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {company_stats[company]['chats_processed']}")
        stats.append("")
        total_accounts += accounts_count
    stats.append("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º:")
    stats.append(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
    stats.append(f"–õ–∞–π–∫–æ–≤ —Å—Ç–æ—Ä–∏—Å —Å–µ–≥–æ–¥–Ω—è: {sum(s.story_likes_today for s in sessions if s.me)}")
    stats.append(f"–°—Ç–æ—Ä–∏—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {sum(stats['stories_viewed'] for stats in company_stats.values())}")
    stats.append(f"–õ–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sum(stats['likes_set'] for stats in company_stats.values())}")
    stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫—Ä—ã—Ç–æ: {len(set.union(*(stats['unique_users'] for stats in company_stats.values())))}")
    stats.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–æ—Ä–∏—Å–∞–º–∏: {len(set.union(*(stats['unique_users_with_stories'] for stats in company_stats.values())))}")
    stats.append(f"–ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {sum(stats['channels_processed'] for stats in company_stats.values())}")
    stats.append(f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {sum(stats['chats_processed'] for stats in company_stats.values())}")
    return "\n".join(stats)

def make_stat_str(session):
    blocked = "‚ò¢Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if session.blocked else f"‚ö†Ô∏è –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≤ {session.unblocked_at}" if session.unblocked_at else "üóí –ñ–¥—ë—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏" if session.sent_appelation else "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω"
    username = session.me.username if session.me.username else session.me.phone_number if session.me.phone_number else session.me.id
    premium = "‚úÖ –ï—Å—Ç—å –ø—Ä–µ–º–∏—É–º" if session.me.is_premium else "‚ùå –ù–µ—Ç –ø—Ä–µ–º–∏—É–º–∞"
    return f"{session.filename} - {blocked} - {username} - {premium} - –õ–∞–π–∫–æ–≤ —Å—Ç–æ—Ä–∏—Å —Å–µ–≥–æ–¥–Ω—è: {session.story_likes_today}"

def create_companies_keyboard(selected_companies: set):
    builder = InlineKeyboardBuilder()
    for company in company_configs.keys():
        is_selected = company in selected_companies
        builder.row(InlineKeyboardButton(
            text=f"{'‚úÖ' if is_selected else '‚ùå'} {company}",
            callback_data=f"select_company_{company}"
        ))
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="select_companies_done"))
    builder.row(InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="select_all_companies"))
    return builder.as_markup()

async def determine_entity_type(session, entity):
    try:
        if isinstance(entity, Chat):
            return "chat"
        elif isinstance(entity, Channel):
            if entity.broadcast:
                return "channel"
            elif entity.megagroup:
                return "chat"
            else:
                participant = await session.app(functions.channels.GetParticipantRequest(
                    channel=entity,
                    participant=await session.app.get_me()
                ))
                if participant.participant._constructor_id == ChannelParticipant._constructor_id:
                    return "chat"
                return "channel"
        return "unknown"
    except Exception as e:
        rootLogger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏ {entity.id}: {str(e)}")
        return "unknown"

async def determine_chat_type(session, chat_id):
    try:
        participants_count = (await session.app(functions.channels.GetFullChannelRequest(chat_id))).full_chat.participants_count
        return "open" if participants_count > 50 else "closed"
    except Exception as e:
        rootLogger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞ {chat_id}: {str(e)}")
        return "closed"

async def parse_open_chat(session, chat_id):
    users = []
    try:
        async for participant in session.app.iter_participants(chat_id):
            if hasattr(participant, 'user') and participant.user and participant.user.id:
                users.append(participant.user.id)
        users = list(set(users))
        rootLogger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(users)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        rootLogger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ {chat_id}: {str(e)}")
    return users

async def parse_closed_chat(session, chat_id):
    users = set()
    try:
        async for message in session.app.iter_messages(chat_id):
            try:
                if message.from_id and isinstance(message.from_id, PeerUser):
                    users.add(message.from_id.user_id)
            except Exception as e:
                rootLogger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
                continue
        rootLogger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(users)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}")
    except FloodWaitError as e:
        rootLogger.warning(f"FloodWait –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Ç–∞ {chat_id}: –∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.seconds)
        return await parse_closed_chat(session, chat_id)
    except Exception as e:
        rootLogger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ {chat_id}: {str(e)}")
    return list(users)

async def process_channel(session, channel_id):
    try:
        channel = await session.app.get_entity(channel_id)
        full_channel = await session.app(functions.channels.GetFullChannelRequest(channel))
        linked_chat_id = full_channel.full_chat.linked_chat_id
        if linked_chat_id:
            chat_type = await determine_chat_type(session, linked_chat_id)
            users = await parse_open_chat(session, linked_chat_id) if chat_type == "open" else await parse_closed_chat(session, linked_chat_id)
            return users
        else:
            rootLogger.info(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞")
            return []
    except Exception as e:
        rootLogger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
        return []

async def join_by_invite_link(session, invite_link):
    try:
        if invite_link.startswith("t.me/+"):
            invite_hash = invite_link.split("+")[1]
        elif invite_link.startswith("https://t.me/+"):
            invite_hash = invite_link.split("+")[1]
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
        result = await session.app(functions.messages.ImportChatInviteRequest(invite_hash))
        chat = result.chats[0]
        rootLogger.info(f"–ê–∫–∫–∞—É–Ω—Ç {session.filename} –≤—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç {chat.id} –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {invite_link}")
        return chat.id
    except (UserNotParticipantError, ForbiddenError, ValueError) as e:
        rootLogger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –¥–ª—è {session.filename}: {str(e)}")
        return None